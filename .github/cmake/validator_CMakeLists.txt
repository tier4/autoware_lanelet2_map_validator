cmake_minimum_required(VERSION 3.14)
project(autoware_lanelet2_map_validator VERSION 1.5.2)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(BUILD_SHARED_LIBS OFF)

# Dependencies
find_package(ament_cmake_auto REQUIRED)
find_package(nlohmann_json REQUIRED)

# Extract package version
file(READ "${CMAKE_CURRENT_SOURCE_DIR}/package.xml" PACKAGE_XML_CONTENT)
string(REGEX MATCH "<version>[^\n\r<]*</version>" VERSION_TAG "${PACKAGE_XML_CONTENT}")
string(REGEX REPLACE ".*<version>([^\n\r<]*)</version>.*" "\\1" PACKAGE_VERSION "${VERSION_TAG}")

set(PACKAGE_VERSION_STR "${PACKAGE_VERSION}")

message(STATUS "Building version ${PACKAGE_VERSION}")

# Default parameters to embed
file(READ "config/params.yaml" EMBEDDED_YAML)
file(READ "config/issues_info.json" EMBEDDED_JSON)

set(DEFAULT_YAML "${EMBEDDED_YAML}")
set(DEFAULT_JSON "${EMBEDDED_JSON}")

configure_file(
  "${CMAKE_CURRENT_SOURCE_DIR}/src/include/lanelet2_map_validator/embedded_defaults.hpp.in"
  "${CMAKE_CURRENT_BINARY_DIR}/include/lanelet2_map_validator/embedded_defaults.hpp"
  @ONLY
)

# Source files
file(GLOB_RECURSE MAP_VALIDATOR_SRC
  src/common/*.cpp
  src/validators/*.cpp
)

# NOTE: keep this order in target_include_directories or the build system
# selects the wrong embedded_defaults.hpp
message(STATUS "CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}")
message(STATUS "CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")
add_library(map_validator_includes INTERFACE)
target_include_directories(map_validator_includes INTERFACE
  ${CMAKE_CURRENT_SOURCE_DIR}/src/include
  ${CMAKE_CURRENT_BINARY_DIR}/include
  $ENV{GITHUB_WORKSPACE}/autoware_lanelet2_extension/autoware_lanelet2_extension/include
  $ENV{GITHUB_WORKSPACE}/lanelet2/install/include
  $ENV{GITHUB_WORKSPACE}/fmt/temp_install/include
  /usr/include/eigen3
)

add_library(autoware_lanelet2_map_validator_obj OBJECT ${MAP_VALIDATOR_SRC})
target_link_libraries(autoware_lanelet2_map_validator_obj map_validator_includes)

# ========= Executable =============

add_executable(autoware_lanelet2_map_validator
  src/main.cpp
  $<TARGET_OBJECTS:autoware_lanelet2_map_validator_obj>
  $ENV{GITHUB_WORKSPACE}/autoware_lanelet2_extension/autoware_lanelet2_extension/include/autoware_lanelet2_extension/projection/transverse_mercator_projector.hpp
  $ENV{GITHUB_WORKSPACE}/autoware_lanelet2_extension/autoware_lanelet2_extension/include/autoware_lanelet2_extension/projection/mgrs_projector.hpp
)

# ========= Link Libraries =========

target_link_libraries(autoware_lanelet2_map_validator map_validator_includes)

# Force static linking by specifying -static-libgcc and -static-libstdc++
target_link_options(autoware_lanelet2_map_validator PRIVATE
  -Wl,--start-group
  -static-libgcc
  -static-libstdc++
)

target_link_libraries(autoware_lanelet2_map_validator
  $ENV{GITHUB_WORKSPACE}/autoware_lanelet2_extension/autoware_lanelet2_extension/build/libautoware_lanelet2_extension_lib.a

  $ENV{GITHUB_WORKSPACE}/lanelet2/install/lib/liblanelet2_validation.a
  $ENV{GITHUB_WORKSPACE}/lanelet2/install/lib/liblanelet2_routing.a
  $ENV{GITHUB_WORKSPACE}/lanelet2/install/lib/liblanelet2_traffic_rules.a
  $ENV{GITHUB_WORKSPACE}/lanelet2/install/lib/liblanelet2_io.a
  $ENV{GITHUB_WORKSPACE}/lanelet2/install/lib/liblanelet2_projection.a
  $ENV{GITHUB_WORKSPACE}/lanelet2/install/lib/liblanelet2_core.a

  /usr/lib/x86_64-linux-gnu/libyaml-cpp.a
  $ENV{GITHUB_WORKSPACE}/fmt/temp_install/lib/libfmt.a

  nlohmann_json::nlohmann_json
  /usr/lib/x86_64-linux-gnu/libboost_program_options.a
  /usr/lib/x86_64-linux-gnu/libboost_filesystem.a
  /usr/lib/x86_64-linux-gnu/libboost_system.a

  /usr/lib/x86_64-linux-gnu/libboost_serialization.a
  /usr/lib/x86_64-linux-gnu/libboost_wserialization.a

  /usr/lib/x86_64-linux-gnu/libGeographic.a
  /usr/lib/x86_64-linux-gnu/libpugixml.a

  -Wl,-Bstatic
  pthread
  -Wl,-Bdynamic

  dl
  stdc++fs
)

target_link_options(autoware_lanelet2_map_validator PRIVATE -Wl,--end-group)

# ========= Install =========
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
  set(CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_BINARY_DIR}/install" CACHE PATH "Install prefix" FORCE)
endif()

install(TARGETS autoware_lanelet2_map_validator DESTINATION lib/${PROJECT_NAME})
install(PROGRAMS template/create_new_validator.py DESTINATION lib/${PROJECT_NAME})

# Optional config files
install(
  DIRECTORY config map_requirements
  DESTINATION share/${PROJECT_NAME}
)

# Optional test data if desired
install(DIRECTORY test/data DESTINATION share/${PROJECT_NAME})

ament_package()
