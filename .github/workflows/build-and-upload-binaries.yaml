name: static-build-and-upload-binaries

on:
  workflow_dispatch:
    inputs:
      tag-name:
        description: The name of the tag to build and upload binaries for
        type: string
        required: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Get Release Version
        id: get_version
        run: |
          REF_NAME="${{ github.event.inputs.tag-name }}"
          VERSION=${REF_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Split into major, minor, patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Default values to 0 if missing
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}

          # Reference version 1.5.2
          REF_MAJOR=1
          REF_MINOR=5
          REF_PATCH=2

          # Compare version parts
          if (( MAJOR < REF_MAJOR )) || \
             (( MAJOR == REF_MAJOR && MINOR < REF_MINOR )) || \
             (( MAJOR == REF_MAJOR && MINOR == REF_MINOR && PATCH <= REF_PATCH )); then
            CATEGORY="before_or_equal_1_5_2"
          else
            CATEGORY="after_1_5_2"
          fi

          echo "Category: $CATEGORY"
          echo "category=$CATEGORY" >> "$GITHUB_OUTPUT"

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.get_version.outputs.version }}

      - name: Cherry-pick preparation
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin main static_build_helper

      - name: cherry-pick for version <= 1.5.2
        if: steps.parse.outputs.category == 'before_or_equal_1_5_2'
        run: |
          git cherry-pick 2f7266dd30e35d79870682eb6862febda60ec31a
          git cherry-pick 8ed41f2f8d59d63c09bb47ac8ad59d4f56c7d07c
          git cherry-pick 36c5e266dbf2bba0df39a7f789615fa4a2ecb8c3

      - name: cherry-pick for version > 1.5.2
        if: steps.parse.outputs.category == 'after_1_5_2'
        run: |
          git cherry-pick 2f7266dd30e35d79870682eb6862febda60ec31a

      - name: Install Dependencies
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y curl gnupg lsb-release ca-certificates
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list

          sudo apt-get update
          sudo apt-get install -y \
            ros-humble-ros-base \
            git build-essential cmake \
            libboost-all-dev \
            nlohmann-json3-dev libyaml-cpp-dev libgeographic-dev libpugixml-dev libeigen3-dev \
            librange-v3-dev \
            python3-colcon-common-extensions python3-ament-package \
            ros-humble-mrt-cmake-modules \
            ros-humble-geographic-msgs ros-humble-unique-identifier-msgs \
            ros-humble-rosidl-typesupport-c ros-humble-rosidl-typesupport-cpp \
            ros-humble-tf2 ros-humble-tf2-geometry-msgs ros-humble-visualization-msgs
          sudo rm -rf /var/lib/apt/lists/*

      - name: Build Lanelet2 (static, loop style)
        run: |
          set -e
          source /opt/ros/humble/setup.bash
          git clone https://github.com/fzi-forschungszentrum-informatik/lanelet2.git
          cd lanelet2
          git checkout 1.2.2
          mkdir -p build install
          cd build
          for pkg in lanelet2_core lanelet2_io lanelet2_projection lanelet2_traffic_rules lanelet2_routing lanelet2_validation; do
            echo "==== Building $pkg ===="
            mkdir -p $pkg
            cd $pkg
            if [ -d ../../install/share/lanelet2_core ]; then
              export CMAKE_PREFIX_PATH="$(realpath ../../install):/opt/ros/humble:${CMAKE_PREFIX_PATH}"
              export AMENT_PREFIX_PATH="$(realpath ../../install):${AMENT_PREFIX_PATH}"
            else
              export CMAKE_PREFIX_PATH="/opt/ros/humble"
            fi
            cmake ../../$pkg \
              -DCMAKE_PREFIX_PATH="${CMAKE_PREFIX_PATH}" \
              -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_CXX_STANDARD=17 \
              -DCMAKE_CXX_FLAGS="-fPIC" \
              -DBUILD_SHARED_LIBS=OFF \
              -DBUILD_TESTING=OFF \
              -DCMAKE_INSTALL_PREFIX=../../install
            make -j$(nproc)
            make install
            cd ..
          done

      - name: Build autoware_map_msgs
        run: |
          set -e
          source /opt/ros/humble/setup.bash
          mkdir -p autoware_ws/src
          cd autoware_ws/src
          git clone https://github.com/autowarefoundation/autoware_msgs.git
          cd ..
          colcon build --cmake-args -DBUILD_TESTING=OFF

      - name: Build fmt (static)
        run: |
          set -e
          git clone https://github.com/fmtlib/fmt.git
          cd fmt
          mkdir -p build temp_install
          cd build
          cmake .. \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_STANDARD=17 \
            -DCMAKE_CXX_FLAGS="-fPIC" \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_INSTALL_PREFIX=../temp_install
          make -j$(nproc)
          make install

      - name: Build autoware_lanelet2_extension (static lib)
        run: |
          set -e
          source /opt/ros/humble/setup.bash
          git clone https://github.com/autowarefoundation/autoware_lanelet2_extension.git
          cp $GITHUB_WORKSPACE/.github/cmake/lanelet2_extension_CMakeLists.txt autoware_lanelet2_extension/autoware_lanelet2_extension/CMakeLists.txt
          cd autoware_lanelet2_extension/autoware_lanelet2_extension
          mkdir -p build
          cd build
          export CMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/lanelet2/install:$GITHUB_WORKSPACE/autoware_ws/install:$GITHUB_WORKSPACE/fmt/temp_install:/opt/ros/humble"
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DLANELET2_INSTALL_DIR="$GITHUB_WORKSPACE/lanelet2/install"
          make -j$(nproc)
          make install

      - name: Build validator (static exe)
        id: build_validator
        run: |
          set -e
          source /opt/ros/humble/setup.bash
          cp $GITHUB_WORKSPACE/.github/cmake/validator_CMakeLists.txt autoware_lanelet2_map_validator/CMakeLists.txt
          cd autoware_lanelet2_map_validator
          mkdir -p build install
          cd build
          export CMAKE_PREFIX_PATH="$GITHUB_WORKSPACE/autoware_ws/install:$GITHUB_WORKSPACE/lanelet2/install:$GITHUB_WORKSPACE/fmt/temp_install:/opt/ros/humble"
          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DLANELET2_INSTALL_DIR="$GITHUB_WORKSPACE/lanelet2/install" \
            -DAUTOWARE_LANELET2_EXTENSION_INSTALL_DIR="$GITHUB_WORKSPACE/autoware_lanelet2_extension/autoware_lanelet2_extension/install"
          make -j$(nproc)
          make install
          BIN=../install/lib/autoware_lanelet2_map_validator/autoware_lanelet2_map_validator
          ls -l $BIN
          echo "artifact=$(realpath $BIN)" >> $GITHUB_OUTPUT

      - name: Package artifacts
        id: package
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          ZIP_NAME="autoware_lanelet2_map_validator-${VERSION}-ubuntu-22.04.zip"
          mkdir release_package
          cp "${{ steps.build_validator.outputs.artifact }}" release_package/
          cp -r autoware_lanelet2_map_validator/config release_package/
          cp -r autoware_lanelet2_map_validator/map_requirements release_package/
          strip release_package/autoware_lanelet2_map_validator || true
          zip -r $ZIP_NAME release_package
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT

      - name: Sign the package with GPG
        id: gpg-sign
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          gpg --batch --yes --detach-sign --armor --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" -o ${{ steps.package.outputs.zip_name }}.asc ${{ steps.package.outputs.zip_name }}
          echo "signature_name=${{ steps.package.outputs.zip_name }}.asc" >> $GITHUB_OUTPUT

      - name: Install GitHub CLI
        run: |
          (type -p wget >/dev/null || (sudo apt-get update && sudo apt-get install wget -y))
          sudo mkdir -p -m 755 /etc/apt/keyrings
          wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null
          sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee  > /dev/null
          sudo apt-get update
          sudo apt-get install gh -y

      - name: Upload artifacts to GitHub Release
        run: |
          gh release upload "${{ steps.get_version.outputs.version }}" \
            "${{ steps.package.outputs.zip_name }}" \
            "${{ steps.gpg-sign.outputs.signature_name }}" \
            --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
